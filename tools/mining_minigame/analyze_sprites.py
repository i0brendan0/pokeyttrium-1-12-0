from PIL import Image
import math
import json
import os

def turn_analysed_data_into_string(data, enum):
    result = "      "

    for i in data:
        result = result + str(i) + ","

    result = "    [" + enum + "] = " + "{\n" + result + "\n" + "    },\n"
    return result

def get_id_by_path(data, filename, whichtype):
    for item in data[whichtype]:
        if item["path"] == filename:
            return item["id"]
    print(f"No ID found for the path '{filename}'.")
    quit()

def get_metatile_state(x16, y16, tilelist):
    # Top-Left tile
    x8_0 = x16 * 2
    y8_0 = y16 * 2

    # Top-Right tile
    x8_1 = x8_0 + 1
    y8_1 = y8_0

    # Bottom-Left tile
    x8_2 = x8_0
    y8_2 = y8_0 + 1

    # Bottom-Right tile
    x8_3 = x8_1
    y8_3 = y8_2

    if tilelist[ y8_0 * 8 + x8_0 ] == "0" and tilelist[ y8_1 * 8 + x8_1 ] == "0" and tilelist[ y8_2 * 8 + x8_2 ] == "0" and tilelist[ y8_3 * 8 + x8_3 ] == "0":
        return 0
    else:
        return 1

def main():
    json_path = "./tools/mining_minigame/table.json"
    gfx_items = "./graphics/mining_minigame/items/"
    gfx_stones = "./graphics/mining_minigame/stones/"
    contents = """// DO NOT MODIFY THIS FILE'S CONTENT! THE CONTENT OF THIS FILE IS AUTOGENERATED! ONLY MODIFY THIS FILE IF YOU KNOW WHAT YOU ARE DOING!
#include "constants/mining_minigame.h"

static const u8 sSpriteTileTable[][16] = {
"""

    with open(json_path, "rb") as f:
        json_data = json.load(f)

    # Items
    for filename in os.listdir(gfx_items):
        if os.path.isfile(os.path.join(gfx_items, filename)) and filename.endswith('.png'):
            key = gfx_items + filename
            enum = get_id_by_path(json_data, key, "items")
            px = Image.open(key).load()
            chunks = [False] * 64
            for y in range(0, 64):
                for x in range(0, 64):
                    if not (px[x, y] == 0):
                        chunkX = math.floor(x / 8)
                        chunkY = math.floor(y / 8)
                        chunks[chunkY * 8 + chunkX] = True

            # 8x8 tile list
            tile_list = list()
            for y in range(0, 8):
                for x in range(0, 8):
                    if chunks[y * 8 + x]:
                        tile_list.append("1")
                    else:
                        tile_list.append("0")

            # 16x16 tile list
            metatile_list = list()
            for y in range(0, 4):
                for x in range(0, 4):
                    metatile_list.append(get_metatile_state(x, y, tile_list))
            contents = contents + turn_analysed_data_into_string(metatile_list, enum)

    # Stones
    for filename in os.listdir(gfx_stones):
        if os.path.isfile(os.path.join(gfx_stones, filename)) and filename.endswith('.png'):
            key = gfx_stones + filename
            enum = get_id_by_path(json_data, key, "stones")
            px = Image.open(key).load()
            chunks = [False] * 64
            for y in range(0, 64):
                for x in range(0, 64):
                    if not (px[x, y] == 0):
                        chunkX = math.floor(x / 8)
                        chunkY = math.floor(y / 8)
                        chunks[chunkY * 8 + chunkX] = True

            # 8x8 tile list
            tile_list = list()
            for y in range(0, 8):
                for x in range(0, 8):
                    if chunks[y * 8 + x]:
                        tile_list.append("1")
                    else:
                        tile_list.append("0")

            # 16x16 tile list
            metatile_list = list()
            for y in range(0, 4):
                for x in range(0, 4):
                    metatile_list.append(get_metatile_state(x, y, tile_list))
            contents = contents + turn_analysed_data_into_string(metatile_list, enum)


    contents = contents + "};"

    with open('./src/data/mining_minigame.h', 'w') as file:
        file.write(contents)

if __name__ == "__main__":
    main()
